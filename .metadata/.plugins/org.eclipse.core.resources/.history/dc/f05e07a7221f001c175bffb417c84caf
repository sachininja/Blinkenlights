/*
 * Copyright 2016-2021 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * @file    MKL25Z128xxx4_Project.c
 * @brief   Application entry point.
 */
#include <stdio.h>
#include <stdint.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MKL25Z4.h"
#include "fsl_debug_console.h"
#include "LED.h"
//#include "tpm.h"

/* TODO: insert other include files here. */

/* TODO: insert other definitions and declarations here. */

#define LED1_SHIFT (1)	// on port A
#define LED2_SHIFT (2)	// on port A
#define SW1_SHIFT (5)	// on port A

#define MASK(x) (1UL << (x))

t_LED LED[4] = {{RED, MASK(RED_LED_SHIFT)},
		{GREEN, MASK(GREEN_LED_SHIFT)},
		{BLUE, MASK(BLUE_LED_SHIFT)},
		{WHITE, (MASK(RED_LED_SHIFT) | MASK(GREEN_LED_SHIFT)), (MASK(BLUE_LED_SHIFT))},

};

uint32_t ontime_delay[5] = {MS_DELAY_100, MS_DELAY_500, MS_DELAY_1000, MS_DELAY_2000, MS_DELAY_3000};


/*
 * @brief   Application entry point.
 */


static int count = 0;
void Delay(volatile unsigned int time_del) {
		count++;
		while (time_del--) {
			;
		}
}



#define TOUCH_OFFSET 630  // offset value to be subtracted
#define TOUCH_DATA (TSI0->DATA & 0xFFFF)//macro for extracting the count from data register

void Touch_Init()
{
	SIM->SCGC5 |= SIM_SCGC5_TSI_MASK; // enabling the clock

	TSI0->GENCS = TSI_GENCS_MODE(0u) | //operating in non-noise mode
								TSI_GENCS_REFCHRG(0u) | //reference oscillator charge and discharge value 500nA
								TSI_GENCS_DVOLT(0u) | //oscillator voltage rails set to default
								TSI_GENCS_EXTCHRG(0u) | //electrode oscillator charge and discharge value 500nA
								TSI_GENCS_PS(0u) |  // frequency clock divided by one
								TSI_GENCS_NSCN(31u) | //scanning the electrode 32 times
								TSI_GENCS_TSIEN_MASK | //enabling the TSI module
								TSI_GENCS_EOSF_MASK; // writing one to clear the end of scan flag


}
void RGB_Init()
{
	// Enable clock to Port B and Port D
	SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK;
	// Make 3 pins GPIO
	PORTB->PCR[RED_LED_SHIFT] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[RED_LED_SHIFT] |= PORT_PCR_MUX(1);
	PORTB->PCR[GREEN_LED_SHIFT] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[GREEN_LED_SHIFT] |= PORT_PCR_MUX(1);
	PORTD->PCR[BLUE_LED_SHIFT] &= ~PORT_PCR_MUX_MASK;
	PORTD->PCR[BLUE_LED_SHIFT] |= PORT_PCR_MUX(1);

	// Set ports to outputs
	PTB->PDDR |= MASK(RED_LED_SHIFT) | MASK(GREEN_LED_SHIFT);
	PTD->PDDR |= MASK(BLUE_LED_SHIFT);

	// Turn off all the LEDs
	PTB->PSOR |= MASK(RED_LED_SHIFT) | MASK(GREEN_LED_SHIFT);
	PTD->PSOR |= MASK(BLUE_LED_SHIFT);
}
void Test_RGB_Flasher(void)
{

	/* Turn on each LED one after other for 500ms and turn off for 100ms*/
	/*Enter the color, on time and off time of each of the LEDs  */
	blink_led(RED, MS_DELAY_500, MS_DELAY_100);
	blink_led(GREEN, MS_DELAY_500, MS_DELAY_100);
	blink_led(BLUE, MS_DELAY_500, MS_DELAY_100);
	blink_led(WHITE, MS_DELAY_100, MS_DELAY_100);
	blink_led(WHITE, MS_DELAY_100, MS_DELAY_100);


}

void blink_led( t_color color, uint32_t ontime, uint32_t offtime)
{
		switch(color)
		{
			case RED:
			case GREEN:
			{
				PTB->PCOR  |=  LED[color].mask1;
				Delay(ontime);
				PTB->PSOR |= LED[color].mask1;
				Delay(offtime);
				break;
			}
			case BLUE:
			{
				PTD->PCOR  |=  LED[color].mask1;
				Delay(ontime);
				PTD->PSOR |= LED[color].mask1;
				Delay(offtime);
				break;
			}
			case WHITE:
			{
				PTB->PCOR  |=  LED[color].mask1;
				PTD->PCOR |= LED[color].mask2;
				Delay(ontime);
				PTB->PSOR  |=  LED[color].mask1;
				PTD->PSOR |= LED[color].mask2;
				Delay(offtime);
				break;
			}
		}
}

void blink_led_on( t_color color)
{
	//static t_color previous_color = WHITE;
	//static t_color temp_color = WHITE;
	//static uint8_t counter_wait = 1;
/*
	if(temp_color != color)
	{
		temp_color = color;
		counter_wait = 1;
	}
	else
	{
		counter_wait++;
	}
*/
	//if(counter_wait == 2)
	//{
	// Turn off all the LEDs
		PTB->PSOR |= MASK(RED_LED_SHIFT) | MASK(GREEN_LED_SHIFT);
		PTD->PSOR |= MASK(BLUE_LED_SHIFT);

		switch(color)
		{
			case RED:
			case GREEN:
			{
				PTB->PCOR  |=  LED[color].mask1;
				//Delay(ontime);
				break;
			}
			case BLUE:
			{
				PTD->PCOR  |=  LED[color].mask1;
				//Delay(ontime);
				break;
			}
			case WHITE:
			{
				PTB->PCOR  |=  LED[color].mask1;
				PTD->PCOR |= LED[color].mask2;
				//Delay(ontime);
				break;
			}
		}
		//counter_wait = 1;
		//previous_color = color;
	//}
	//else
	//{
		//do nothing
	//}

}


void blink_led_off( t_color color)
{
	//static t_color previous_color = WHITE;


//	if(previous_color != color )
//	{
		switch(color)
		{
			case RED:
			case GREEN:
			{
				PTB->PSOR |= LED[color].mask1;
				//Delay(offtime);
				break;
			}
			case BLUE:
			{
				PTD->PSOR |= LED[color].mask1;
				//Delay(offtime);
				break;
			}
			case WHITE:
			{
				PTB->PSOR  |=  LED[color].mask1;
				PTD->PSOR |= LED[color].mask2;
				//Delay(offtime);
				break;
			}
		}
	//	previous_color = color;
//	}
//	else
//	{
		//do nothing
//	}
}

int Touch_Scan_LH(void)
{
	unsigned int scan = 0;
	TSI0->DATA = 	TSI_DATA_TSICH(10u);
	TSI0->DATA |= TSI_DATA_SWTS_MASK; //software trigger to start the scan
	while (!(TSI0->GENCS & TSI_GENCS_EOSF_MASK )) // waiting for the scan to complete 32 times
	;
	scan = TOUCH_DATA;
	TSI0->GENCS |= TSI_GENCS_EOSF_MASK ; //writing one to clear the end of scan flag
	return scan - TOUCH_OFFSET;
}


static t_color current_blinking_color = WHITE;
static uint8_t run_on_timer = 1;
static uint8_t run_off_timer = 0;

uint32_t on_current_delay[4] = { DELAY_500, DELAY_1000, DELAY_2000, DELAY_3000};

void Flasher()
{
	//put a timer flag, clear it when the delay is over.
static uint8_t on_counter = 0;
static uint8_t off_counter = 0;
static uint8_t i=0;
//static t_current_delay on_current_delay = DELAY_500;
static t_current_delay off_current_delay = DELAY_500;


	if(run_on_timer)
	{

		Delay(MS_DELAY_100);
		on_counter++;

		if(on_counter == on_current_delay[i])
		{
			i++;
			if(i == 4)
			{
				i = 0;
			}
			on_counter = 0;
			run_on_timer = 0;
			run_off_timer = 1;
		}
		else
		{
			// do nothing
		}

		//led_update();

	}

	else if(run_off_timer)
	{
		Delay(MS_DELAY_100);
		off_counter++;
		if(off_counter == off_current_delay)
		{
			off_current_delay++;
			if(off_current_delay > 5)
			{
				off_current_delay = 5 ;
			}
			off_counter = 0;
			run_on_timer = 1;
			run_off_timer = 0;
		}
		else
		{
			// do nothing
		}

		//led_update();
	}

}


void led_update()
{
	if(run_on_timer)
	{
		blink_led_on(current_blinking_color);
	}
	else if(run_off_timer)
	{
		blink_led_off(current_blinking_color);
		//run_on_timer = 1;
		//run_off_timer = 0;
	}
}

void color_check(uint32_t touch_val)
{
	if(touch_val >= 200 && touch_val < 850)
	{
		current_blinking_color = RED;
	}
	else if(touch_val >= 800 && touch_val < 1700)
	{
		current_blinking_color = GREEN;
	}

	else if(touch_val >= 1700 && touch_val < 2500)
	{
		current_blinking_color = BLUE;
	}
	else
	{
		//do nothing
	}
}

int main(void)
{
	uint32_t touch_val;
	RGB_Init();
	Touch_Init();
	Test_RGB_Flasher();
	while(1)
	{
		Flasher(); //LED handler //run for 100ms // app_led.c and driver_led.c
		led_update();
		touch_val = Touch_Scan_LH();
		color_check(touch_val);
		led_update();
#ifdef DEBUGME
		printf("Value of Touch Scan: %d \n\r",touch_val);
#endif
		//check sense(); //update color

	}
}


